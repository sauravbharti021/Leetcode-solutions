#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
class Solution {
public:
    vector<vector<int>> d{{0,1}, {0,-1}, {1,0}, {-1, 0}};
    ll ans=0;
    vector<vector<bool>> vis;
    ll wall=0;
    
    int uniquePathsIII(vector<vector<int>>& grid) {
        
         ll n =grid.size(), m=grid[0].size();
         vis.assign(n+1, vector<bool>(m+1, false));
        
        
         rep(i,n){
             rep(j,m){
                 if(grid[i][j]==-1){
                     wall++;
                 }
             }
         }
        
        
         rep(i,n){
             rep(j,m){
                 if(grid[i][j]==1){
                     recur(i, j , 0, grid);
                     
                 }
             }
         }
        
        return ans;
        
    }
    void recur(int i, int j, ll cnt, vector<vector<int>>& grid){
        
        ll n =grid.size(), m=grid[0].size();
        
        if(grid[i][j]==2){
            if(cnt== (n*m -(1+wall) ))
            ans++;
            return;
        }
        
        vis[i][j]=true;
        cnt++;
        
        rep(k, 4){
            int x= i+ d[k][0];
            int y= j+ d[k][1];
            
            if(x<n && y<m && x>=0 && y>=0 && !vis[x][y] && grid[x][y]!=-1 ){
                recur(x, y, cnt, grid);
                
                
            }
        }
        vis[i][j] = false;
    }
};
