#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
class Solution {
public:
    vector<vector<int>> insert(vector<vector<int>>& intervals, vector<int>& newInterval) {
        vector<vector<int>> ans;
        int n= intervals.size();
        int start= newInterval[0], end= newInterval[1];
        

        
        ll flag=0;
        rep(i,n){
            if(start>= intervals[i][0] && start<=intervals[i][1]){
                flag=1;
                ll j=i;
                int e=-1, f1=0;
                while(j<n){
                    
                    if(intervals[j][0]> end){
                        e=end;
                        ans.pb({intervals[i][0] , e });
                        i=j-1;
                        f1=1;
                        break;
                    }
                    if(intervals[j][1]>= end ){
                        e=intervals[j][1];
                        ans.pb({intervals[i][0], e});
                        i=j;
                        f1=1;
                        break;
                    }
                    j++;
                }
                
                if(!f1){
                    ans.pb({intervals[i][0], end });
                    i=j;
                }
                
            }
            else ans.pb({intervals[i][0], intervals[i][1]});
        }
        
        if(flag) return ans;
        else ans.clear();
        
        rep(i,n){
            if(start< intervals[i][0] && !flag){
                flag=1;
                ll j=i;
                int e=-1, f1=0;
                while(j<n){
                    if(intervals[j][0]> end){
                        e=end;
                        ans.pb({start , e });
                        i=j-1;
                        f1=1;
                        break;
                    }
                    if(intervals[j][1]>= end ){
                        e=intervals[j][1];
                        ans.pb({start, e});
                        i=j;
                        f1=1;
                        break;
                    }
                    j++;
                }
                
                if(!f1){
                    ans.pb({start, end });
                    i=j;
                }
                
            }
            else ans.pb({intervals[i][0], intervals[i][1]});
        } 
        
        if(flag) return ans;
        
        ans=intervals;
        ans.pb({start, end});
        
       return ans;
        
    }
    
    
};
