#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
class Solution {
public:
    vector<vector<ll>> pre;
    vector<vector<vector<ll>>> dp;
    
    int ways(vector<string>& pizza, int k) {
        ll n= pizza.size();
        ll m=pizza[0].size();
        
        pre.assign(n+1, vector<ll>(m+1, 0));
        dp.assign(n+5, vector<vector<ll>>(m+5, vector<ll>(11, -1)));
        
        rep(i,n){
            rep(j,m){
                pre[i][j] += (pizza[i][j]=='A' ? 1: 0);
                
                pre[i][j] += (i>0 ? pre[i-1][j] : 0) + (j>0 ? pre[i][j-1] : 0) - (i>0 && j>0 ? pre[i-1][j-1] : 0);
                
            }
        }
        
        
        int ans= recur(0,0, k, n,m);
        return ans;
        
    }
    ll recur(int i, int j, int k, int n, int  m){
        if(k==1) return 1;
        
        if(dp[i][j][k] != -1) return dp[i][j][k];
        
        ll cnt=0;
        ll avail = pre[n-1][m-1] - (i>0 ? pre[i-1][m-1] : 0) - (j>0 ? pre[n-1][j-1] : 0) + (i>0 && j>0 ? pre[i-1][j-1] : 0);
        
        
        for(int l= i+1; l<n; l++){
            
            ll now= pre[n-1][m-1] - (l>0 ? pre[l-1][m-1] : 0) - (j>0 ? pre[n-1][j-1] : 0) + (l>0 && j>0 ? pre[l-1][j-1] : 0);
            ll d= avail- now;
            
            if(d>0 && now>0)
                cnt= (cnt+(recur(l, j, k-1, n, m)%mod))%mod;
        }
        
        for(int l= j+1; l<m ;l++){
            ll now= pre[n-1][m-1] - (i>0 ? pre[i-1][m-1] : 0) - (l>0 ? pre[n-1][l-1] : 0) + (i>0 && l>0 ? pre[i-1][l-1] : 0);
            ll d= avail- now;
            
            if(d>0 && now>0)
                cnt= (cnt+(recur(i, l, k-1, n, m)%mod))%mod;
        }
        
        cnt%=mod;
        if(cnt<0) cnt+=mod;
        return dp[i][j][k] = cnt;
        
    }
    
    
};
