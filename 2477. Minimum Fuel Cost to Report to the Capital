#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
class Solution {
public:
    ll ans=0;
    ll dfs(int n, int par, int seats, vector<ll> &dis, vector<vector<ll>> &adj){
        ll cnt=0;
        
        for(auto i: adj[n]){
            if(i!=par){
                cnt+=  dfs(i, n, seats, dis, adj);
            }
        }
        
        if(cnt>=seats && n!=0){
            
            ans+= (dis[n] * (cnt/seats));
            ans+= (cnt/seats)*seats;
            cnt-= (cnt/seats)*seats;
            
            return cnt+1;
        }
        
        return cnt+1;
    }
    
    long long minimumFuelCost(vector<vector<int>>& roads, int seats) {
        
        ll n=roads.size();
        
        vector<vector<ll>> adj(n+2, vector<ll>{});
        rep(i,n){
            adj[roads[i][0]].pb(roads[i][1]);
            adj[roads[i][1]].pb(roads[i][0]);
        }
        
        queue<ll> q;
        q.push(0);
        vector<ll> dis(n+2, 1e8);
        dis[0]=0;
        
        while(!q.empty()){
            ll x= q.front();
            q.pop();
            
            for(auto i: adj[x]){
                if(dis[x]+1<dis[i]){
                    dis[i]= dis[x]+1;
                    q.push(i);
                }
            }
        }
        
        ll now= dfs(0, -1, seats, dis, adj);
        return ans+now-1;
        
    }
};
