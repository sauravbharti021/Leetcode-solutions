class Solution {
public:
    bool finder(multiset<int> &ms, int limit){
        int left = *(ms.begin());
        int right = *(--ms.end());
        return (right-left)<=limit;
    }
    int longestSubarray(vector<int>& nums, int limit) {
        int n = nums.size();
        int l = 0;
        int r = n+1; 
        while(r-l>1){
            int mid = (l+r)/2;
            
            multiset<int> ms;
            int flag=0;
            for(int i=0;i<mid;i++){
                ms.insert(nums[i]);
            }
            if(finder(ms, limit)){
                l= mid;
                continue;
            }
            int j = 0;
            for(int i=mid;i<n;i++){
                ms.insert(nums[i]);
                ms.erase(ms.equal_range(nums[j]).first);
                j++;
                if(finder(ms, limit)){
                    flag=1;
                    break;
                }
            }
            if(flag) l= mid;
            else r=mid;
        }
        
        return l;
    }
};
