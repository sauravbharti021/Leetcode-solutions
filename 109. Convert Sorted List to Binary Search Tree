/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* sortedListToBST(ListNode* head) {
        
        if(head==NULL) return NULL;
        
        ListNode* slow= head;
        ListNode* fast= head;
        ListNode** prev= &head;
        
        while(slow->next!=NULL && fast->next!=NULL && fast->next->next!=NULL ){
            slow= slow->next;
            fast= fast->next->next;
            prev= &((*prev)->next);
                
                if(slow== fast) break;
        }
        ListNode* lol = new ListNode(NULL);
        
        
        TreeNode* root= new TreeNode(slow->val);
        root->right= sortedListToBST(slow->next);
        *prev=NULL;
        root->left= sortedListToBST(head);
        
        return root;
    }
};
