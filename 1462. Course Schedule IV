class Solution {
public:
    vector<vector<int>> adj;
    vector<int> degree;
    map<int, set<int>> m;
    void helper(int n) {
        // BFS-based transitive closure computation
        queue<int> q;
        q.push(n);

        while (!q.empty()) {
            int x = q.front();
            q.pop();

            for (int neighbor : adj[x]) {
                if (m[n].find(neighbor) == m[n].end()) {
                    m[n].insert(neighbor);
                    q.push(neighbor);
                }
            }
        }
    }

    vector<bool> checkIfPrerequisite(int numCourses,
                                     vector<vector<int>>& prerequisites,
                                     vector<vector<int>>& queries) {
        adj.assign(numCourses+ 1, vector<int>{});
        degree.assign(numCourses+1, 0);

        for (int i = 0; i < prerequisites.size(); i++) {
            int u = prerequisites[i][0], v = prerequisites[i][1];
            adj[v].push_back(u);
        }


        for(int i=0;i<numCourses;i++){
            helper(i);
        }
        vector<bool> ans(queries.size(), false);
        for(int i=0;i<queries.size();i++){
            int u = queries[i][0], v= queries[i][1];
            if(m[v].find(u)!=m[v].end()){
                ans[i] = true;
            }
        }
        return ans;
    }
};
