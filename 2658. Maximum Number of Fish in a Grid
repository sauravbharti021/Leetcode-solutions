class Solution {
public:
    vector<vector<int>> vis;
    vector<vector<int>> dir{{0,1}, {0,-1}, {1,0}, {-1, 0}};
    int recur(int i, int j, vector<vector<int>> &g){
        int n = g.size(), m = g[0].size();
        if(i>=n || i<0 || j>=m || j<0)
            return 0;
        vis[i][j] = 1;
        int ans = g[i][j];
        for(int k=0;k<4;k++){
            int u = i+ dir[k][0], v= j+ dir[k][1];
            if(u<n && u>=0 && v>=0 && v<m && !vis[u][v] && g[u][v]){
                ans += recur(u, v, g);
            }
        }
        return ans;
    }
    int findMaxFish(vector<vector<int>>& grid) {
        int n = grid.size(), m = grid[0].size();
        vis.assign(n+1, vector<int>(m+1, 0));

        int ans = 0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(!vis[i][j] && grid[i][j]){
                    ans= max(ans, recur(i, j, grid));
                }
            }
        }

        return ans;
    }
};
