#define rep(i,n) for(int i=0;i<n;i++)
#define ff first
#define ss second
class Solution {
public:
    vector<vector<int>> dir{{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
    vector<vector<int>> highestPeak(vector<vector<int>>& isWater) {
        int n = isWater.size(), m = isWater[0].size();
        vector<vector<int>> ans(n, vector<int>(m, -1));
        queue<pair<int,int>> q;
        rep(i,n){
            rep(j,m){
                if(isWater[i][j]==1){
                    q.push({i,j});
                    ans[i][j] = 0;
                }
            }
        }

        int iniSize = 1;

        while(!q.empty()){
            int size = q.size();
            while(size--){
                pair<int,int> p = q.front();
                q.pop();
                rep(i, 4){
                    int u = p.ff + dir[i][0];
                    int v= p.ss + dir[i][1];

                    if(u>=0 && v>=0 && u<n && v<m && ans[u][v]==-1){
                        ans[u][v] = iniSize;
                        q.push({u, v});
                    }
                }
            }
            iniSize+=1;
        }

        return ans;
    }
};
