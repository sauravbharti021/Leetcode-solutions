/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
class Solution {
public:
    set<vector<ll>> s;
    map<string, vector<TreeNode*>> m;
    set<TreeNode*> ans;
    vector<TreeNode*> findDuplicateSubtrees(TreeNode* root) {
        
        
        string f= dfs(root);
        
        vector<TreeNode*> res;
        
        for(auto i: m) {
            if(i.ss.size()>1)
                res.pb(i.ss[0]);
        }
        
        return res;
        
    }
    
    string dfs(TreeNode* root){
        
        string s="";
        if(root==NULL) return s;
    
        
        
        
        string b= dfs(root->left);
        string c= dfs(root->right);
        
        string f=  "("+b+to_string(root->val)+c+")";
        
        
       
            m[f].pb(root);
        
        return f;    
         
        
    }
    
};
