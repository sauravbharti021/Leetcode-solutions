/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* ans=NULL;
    TreeNode* lcaDeepestLeaves(TreeNode* root) {
        queue<TreeNode*> q;

        q.push(root);
        set<TreeNode*> best;
        while(!q.empty()){
            int size = q.size();
            best.clear();
            while(size--){
                TreeNode* now = q.front();
                q.pop();
                best.insert(now);
                if(now->left!=NULL){
                    q.push(now->left);
                }
                if(now->right!=NULL){
                    q.push(now->right);
                }

            }
        }
        int now = recur(root, best);
        return ans;
    }
    int recur(TreeNode* head, set<TreeNode*> s){
        if(head==NULL)
            return 0;
        int val = 0;
        if(s.find(head)!=s.end()){
            val=1;
        }
        val+= recur(head->left, s);
        val+= recur(head->right, s);

        if(val==s.size() && ans==NULL){
            ans= head;
        }
        return val;
    }
};
