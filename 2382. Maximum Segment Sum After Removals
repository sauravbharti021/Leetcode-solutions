#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)

class Solution {
public:
    vector<long long> maximumSegmentSum(vector<int>& nums, vector<int>& removeQueries) {
        
        ll n=nums.size();
        vector<ll> ans(n);
        
        
        set<pair<ll,ll>> s;
        
        multiset<ll> m;
        
        vector<ll> pre(n,0);
        
        rep(i,n) pre[i] = (i-1>=0 ? pre[i-1] : 0) +nums[i];
        
        // rep(i, n) cout<<pre[i]<<" "; cout<<endl;
        
        s.insert(  mp(0,n-1) );
        m.insert(pre[n-1]);
        
        rep(i, n){
            
         
            auto it= s.upper_bound(mp(removeQueries[i],1e10));
        
            if(it!=s.begin())
            it--;
            pair<ll,ll> p = *it;
            s.erase( it);
                
               ll lol= pre[p.ss] - (p.ff-1>=0 ? pre[p.ff-1] : 0);
            
                   m.erase(m.equal_range(lol).ff);  
            if(p.ss - p.ff ==0) {
                   
                int c=0;   
            } 
            else{ 
                 if(removeQueries[i]-1 >= 0 && p.ff<= removeQueries[i]-1){
                    ll now= pre[removeQueries[i]-1 ] - (p.ff-1>=0 ? pre[p.ff-1] : 0);
                            
                        m.insert(now);
                        s.insert( mp(p.ff, removeQueries[i]-1) );
                        
                    }
                if(removeQueries[i]+1<n && removeQueries[i]+1 <= p.ss){
                          ll now= pre[p.ss ] - pre[removeQueries[i]];
                    
                        m.insert(now);
                        s.insert( mp(removeQueries[i] +1, p.ss)) ;
                         
                     }
            }
            
            
            if(m.empty()) ans[i]=0;
                else{
               
                    
                    ans[i]=*(--m.end());
                    }
            
        }
        
        
        return ans;
        
    }
};
