class Solution {
public:
    int minimumSubarrayLength(vector<int>& nums, int k) {
        int n= nums.size();
        int l=0, r=n+1;
        int flag =0;
        vector<int> fk(32, 0);
        while(k>0){
            int y = 31 - __builtin_clz(k);
            fk[y]+=1;
            k-=(1<<y);
        }
        vector<vector<int>> f(n, vector<int>(32, 0));
        for(int i=0;i<n;i++){
            int y = nums[i];
            while(y>0){
                int z= 31 - __builtin_clz(y);
                f[i][z]+=1;
                y-=(1<<z);
            }
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<32;j++){
                f[i][j] += (i>0? f[i-1][j] : 0);
            }
        }
        
        while(r-l>1){
            int m= (l+r)/2;
            int has = 0;
            for(int i=0;(i+m)<=n;i++){
                int intFlag = 0;
                for(int j=31;j>=0;j--){
                    int have = (f[i+m-1][j]) - (i>0? f[i-1][j] : 0);
                    if(fk[j]==0 && have>0) break;
                    if(fk[j]>0 && have==0){
                        intFlag = 1;
                        break;
                    }
                }
                if(!intFlag) {
                    has = 1;
                    break;
                };
            }
            if(has){
                flag = 1;
                r= m;
            }else{
                l=m;
            }
        }
        if(!flag) return -1;
        
        return r;
    }
};
