class Solution {
public:
    vector<pair<int,pair<int,int>>> a;
    vector<int> dp;
    
    int recur(int i){
        if(i>=a.size())
            return 0;
        if(dp[i]!=-1)
            return dp[i];
        int ans=0;
        
        ans= max(ans, recur(i+1));
        
        auto it = upper_bound(a.begin(), a.end(), make_pair(a[i].second.first, make_pair(0,0)) ) ;
        

        ans= max(ans, a[i].second.second + recur(it- a.begin()));
        
        return dp[i] = ans;
    }
    
    int jobScheduling(vector<int>& startTime, vector<int>& endTime, vector<int>& profit) {
        int n= profit.size();
        a.assign(n, {0,{0,0}});
        dp.assign(n+1, -1);
        
        for(int i=0;i<n;i++){
            a[i].first= startTime[i];
            a[i].second.first= endTime[i];
            a[i].second.second = profit[i];
        }
        sort(a.begin(), a.end());
        
        
        return recur(0);
    }
};
