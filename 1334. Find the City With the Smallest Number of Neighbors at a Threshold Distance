class Solution {
public:
    vector<int> dis;
    int N;
    int recur(int n, int threshold, vector<vector<pair<int,int>>> &adj){
        int ans=0;
        queue<int> q;
        q.push(n);
        dis[n]=0;
        while(!q.empty()){
            int x= q.front();
            q.pop();
            for(auto i: adj[x]){
                if(dis[i.first]> (dis[x]+i.second)){
                    dis[i.first]= dis[x]+i.second;
                    q.push(i.first);
                }
            }
        }
        for(int i=0;i<N;i++){
            if(dis[i]<=threshold) ans+=1;
        }
        return ans-1;
    }
    int findTheCity(int n, vector<vector<int>>& edges, int distanceThreshold) {
        vector<vector<pair<int,int>>> adj(n, vector<pair<int,int>>{});
        N=n;
        for(int i=0;i<edges.size();i++){
            int u= edges[i][0], v= edges[i][1], w= edges[i][2];
            adj[u].push_back({v, w});
            adj[v].push_back({u, w});
        }
        vector<int> res;
        int mi=1e9;
        for(int i=0;i<n;i++){
            dis.assign(n+1, 1e9);
            int temp = recur(i, distanceThreshold, adj);
            // cout<<i<<" "<<temp<<"\n";
            if(temp<mi){
                res.clear();
                res.push_back(i);
                mi= temp;
            }else if(temp==mi){
                res.push_back(i);
            }
        }
        sort(res.begin(), res.end());
        
        return res.back();
    }
};
