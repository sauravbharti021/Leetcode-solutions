
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
  
#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update>
#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
class SummaryRanges {

    
public:
    ordered_set s;
    
    SummaryRanges() {
        
    }
    
    void addNum(int value) {
       s.insert(value);
        
    }
    
    vector<vector<int>> getIntervals() {
        
        vector<vector<int>> ans;
        
        if(s.empty()) return ans;
        
        
        
        int start=*(s.find_by_order(0));
        
        while(true){
            
            ll l=start, r=1e4+1;
            
            while(r-l>1){
                int m= (r+l)/2;
                
                int flag=0;
                if(s.find(m)==s.end()) { flag=1; r=m; continue; }
                
                if(s.order_of_key(m) - s.order_of_key(start)!= m-start ) {flag=1; r=m; continue; }
                
                l=m;
            }
            
            vector<int> now;
            now.pb(start);
            now.pb(l);
            
            ans.pb(now);
            
            auto it= s.lower_bound(l+1);
            if(it==s.end()) break;
            else start = *it;
            
        }
        
        return ans;
        
    }
};
