#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
class Solution {
public:
    vector<int> findBall(vector<vector<int>>& grid) {
        
        int n=grid.size(), m=grid[0].size();
        
        vector<int> ans(m, -1);
        
        rep(i,m){
            
            
            int l= (grid[0][i]==-1) ? i-1 : i;
            int r= l+1;
            
            int h=0;
            while(true  && h<n && l>=0 && r<m){
                
                if(grid[h][l]!= grid[h][r]) break;
                
                if(grid[h][l]==1 && grid[h][r]==1){
                    if( h+1<n && grid[h+1][l] ==-1 && grid[h+1][r]==-1){
                        h++;
                        
                    }
                    else if(h+1< n && r+1<m && grid[h+1][l+1] == 1 && grid[h+1][r+1]==1 ){
                        r++;
                        l++;
                        h++;
                    }else{
                        break;
                    }
                }
                
                else  if(grid[h][l]==-1 && grid[h][r]==-1){
                    if( h+1<n && grid[h+1][l] ==1 && grid[h+1][r]==1){
                        h++;
                        
                    }
                    else if(h+1< n && l-1>=0 && grid[h+1][l-1] == -1 && grid[h+1][r-1]== -1 ){
                        r--;
                        l--;
                        h++;
                    }else{
                        break;
                    }
                }
                
            }
            
            if(h==n-1){
                if(l>=0 && r<m && grid[h][l]== grid[h][r] ){
                    if(grid[h][l]==1) ans[i]=r;
                    else ans[i]=l;
                }
            }
            
        }
        
        return ans;
        
    }
};
