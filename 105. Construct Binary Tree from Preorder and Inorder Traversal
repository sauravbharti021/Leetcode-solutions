/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        
        if(preorder.size()==0)
            return NULL;
        
        stack<TreeNode*> s;
        int t=preorder[0];
        TreeNode* root= new TreeNode(t);
        s.push(root);
         map<ll, ll>m;
        
        rep(i, inorder.size()){
            m[inorder[i]]=i;
        }
        
        for(int i=1;i<preorder.size();i++){
            
            
            TreeNode* node= new TreeNode(preorder[i]);
            
            if( m[preorder[i]]< m[s.top()->val])
                s.top()->left= node;
            
            else{
                TreeNode* parent= NULL;
                
                while(!s.empty() && m[preorder[i]] > m[s.top()->val]){
                    parent= s.top();
                    s.pop();
                }
                parent->right= node;
                    
            } s.push(node);
        }
        
        return root;
    }
};
