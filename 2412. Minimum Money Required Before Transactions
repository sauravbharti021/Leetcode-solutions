#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
class Solution {
public:
    
   bool static myComp(const pair<ll, ll>& a, const pair<ll, ll>& b){ if (a.ss != b.ss)  return a.ss < b.ss;  return a.ff > b.ff;}


    
    long long minimumMoney(vector<vector<int>>& transactions) {
        
        int n=transactions.size();
        
        ll mx= -1;
        
        rep(i, transactions.size()) mx=max(mx, (ll)transactions[i][0] );
        
        ll mx_worst = 0;
        int flag=0;
        
        vector<pair<ll,ll>> worst,good;
        rep(i,n){
            if(transactions[i][0]<=transactions[i][1] ){
                flag=1;
                mx_worst= max(mx_worst, (ll)transactions[i][0] );
            }else{
                good.pb({transactions[i][0], transactions[i][1]});
            }
        }
        
        sort(all(good), myComp);
        
        ll now=0;
        
        rep(i,good.size()){
            
            if(i==0) {
                now+=good[i].ff;
            }else{
                now+= (good[i].ff - good[i-1].ss);
            }
            
        }
        
        ll ans= now + (flag ? max( (ll)0,  mx_worst - (good.size()>0 ? good.back().ss : 0) ) : 0);
        
        mx=max(mx, ans);
        
        return mx;
        
    }
};
