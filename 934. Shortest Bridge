#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
class Solution {
public:
    vector<vector<bool>> vis;
    queue<pair<int,int>> q;
    vector<vector<int>> dis;
    vector<vector<int>> d = {{0,1},{0,-1}, {1,0},{-1,0}};
    
    void recur(int i, int j, vector<vector<int>> &grid,int n){
        if(i>=n || j>=n || i<0 || j<0) return;
        
        if(grid[i][j]==0 || vis[i][j]) return;
        vis[i][j] = true;
        q.push({i,j});
        dis[i][j]=0;
        
        recur(i+1, j, grid,n);
        recur(i-1, j, grid, n);
        recur(i, j-1, grid,n);
        recur(i, j+1, grid, n);
        
        
    }
    
    int shortestBridge(vector<vector<int>>& grid) {
        ll n=grid.size();
        
        vis.assign(n, vector<bool>(n,false));
        dis.assign(n, vector<int>(n, 1e9));
        int flag=0;
        rep(i, n){
            rep(j,n){
                if(grid[i][j]==1){
                   recur(i,j, grid, n);
                    flag=1;
                    break;
                }
            }
            if(flag) break;
        }
        
        ll mi = 1e9;
        while(!q.empty()){
            pair<int,int> x = q.front();
            q.pop();
            
            rep(j, 4){
                
                ll u= x.ff+d[j][0] , v= x.ss+d[j][1];
                if(u<n && v<n && u>=0 && v>=0){
                    if(dis[u][v]> dis[x.ff][x.ss] +1) {
                        q.push({u,v});
                        dis[u][v] = dis[x.ff][x.ss]+1;
                    }
                }
            }
            
        }
        
        rep(i, n){
            rep(j,n){
                if(grid[i][j]==1 && !vis[i][j]){
                   mi= min(mi, (ll)(dis[i][j]));
                }
            }
        }
        
        return mi-1;
        
    }
};
