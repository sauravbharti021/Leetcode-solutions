class Solution {
public:
    int dp[101][101][2];
    bool recur(int i,  int j, int l, string &s1, string &s2, string &s3, int flag){
        if(l>=s3.size()) {
            if(i>=s1.size() && j>=s2.size())
                return true;
            return false;
        }
        
        if(dp[i][j][flag]!=-1) return dp[i][j][flag];
        
        bool ans=false;
        
        if(!flag){
            for(int k=i;k<s1.size();k++){
                if(s1[k]!=s3[l]) break;
                ans |= recur(k+1, j, l+1, s1, s2, s3, flag^1);
                l++;
            }
            
        }else{
            for(int k=j;k<s2.size();k++){
                if(s2[k]!=s3[l]) break;
                ans |= recur(i, k+1, l+1, s1, s2, s3, flag^1);
                l++;
            }
        }
        
        return dp[i][j][flag]=ans;
    }
    
    bool isInterleave(string s1, string s2, string s3) {
        memset(dp, -1, sizeof dp);
        
        return (recur(0, 0, 0, s1, s2, s3, 0) | recur(0, 0, 0, s1, s2, s3, 1));
    }
};
