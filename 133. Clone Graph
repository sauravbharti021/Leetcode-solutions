/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/

class Solution {
public:
    map<Node*, Node*> m;
    Node* dfs(Node* node){
        
        
        vector<Node*> nei;
        Node* now = new Node(node->val);
        m[node] = now;
        
        for(auto i: node->neighbors){
            if(m.find(i)==m.end())
                nei.push_back(dfs(i));
            else
                nei.push_back(m[i]);
        }
        
        now->neighbors = nei;
        
        return now;
        
    }
    Node* cloneGraph(Node* node) {
        if(node==NULL) return NULL;
        return dfs(node);
    }
};
