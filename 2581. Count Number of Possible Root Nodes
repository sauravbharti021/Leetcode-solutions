#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
class Solution {
public:
    vector<ll> val;
    map<pair<ll,ll>,ll> m;
    ll dfs(ll n, ll par, vector<vector<ll>> &adj){
        
        ll cnt=0;
        
        for(auto i: adj[n]){
            if(i!=par){
                if(m.find({n, i})!=m.end())
                    cnt+= (1 + dfs(i, n ,adj) );
                else{
                    cnt+= dfs(i, n, adj);
                }
            }
        }
        
        return val[n] = cnt;
    }
    
    void dfs2(ll n , ll par, vector<vector<ll>> &adj, ll cnt ){
        
        
        for(auto i: adj[n]){
            if(i!=par){
                ll c=cnt;
                if(m.find({i, n})!=m.end()) c+=1;
                
                if(m.find({n,i})!=m.end()) c-=1;
                
                dfs2(i, n, adj, c+val[n] - val[i]);
            }
        }
        
        val[n] += cnt;
    }
    
    
    
    
    int rootCount(vector<vector<int>>& edges, vector<vector<int>>& guesses, int k) {
        
        ll n=edges.size();
        
        val.assign(n+2, 0);
        
        vector<vector<ll>> adj(n+2, vector<ll>{});
        rep(i, n){
            adj[edges[i][0]].pb(edges[i][1]);
            
            adj[edges[i][1]].pb(edges[i][0]);
            
        }
        
        rep(i, guesses.size()){
            m[{guesses[i][0], guesses[i][1]}]++;
        }
        
        ll now= dfs(0, -1, adj);
        dfs2(0, -1, adj, 0);
        
        ll ans=0;
        rep(i,n+1){
            if(val[i]>=k) ans++;
        }
        
        return ans;
        
    }
};
