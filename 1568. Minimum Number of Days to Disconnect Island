class Solution {
public:
    vector<vector<int>> dir{{0,1}, {1, 0}, {-1, 0}, {0,-1}};
    vector<vector<bool>> vis;
    int count=0;
    void dfs(int x, int y, vector<vector<int>> &g){
        vis[x][y] = true;
        int n= vis.size(), m= vis[0].size();
        for(auto i: dir){
            int u = x+ i[0];
            int v = y+ i[1];
            if(u>=0 && u<n && v>=0 && v<m && !vis[u][v] && g[u][v]){
                dfs(u, v, g);
            }
        }
    }
    
    int dfsDoer(vector<vector<int>> &grid){
        int n= grid.size(), m= grid[0].size();
        vis.assign(n, vector<bool>(m, false));
        int temp =0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(!vis[i][j] && grid[i][j]){
                    temp+=1;
                    dfs(i,j, grid);
                }
            }
        }
        return temp;
    }
    
    int minDays(vector<vector<int>>& grid) {
        int n= grid.size(), m= grid[0].size();
        
        
        count = dfsDoer(grid);
        if(count==0 || count>1)
            return 0;
        
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]){
                    grid[i][j] =0;
                    count = dfsDoer(grid);
                    if(count == 0 || count>1)
                        return 1;
                    grid[i][j] =1;
                }
            }
        }
        
        return 2;
    }
};
