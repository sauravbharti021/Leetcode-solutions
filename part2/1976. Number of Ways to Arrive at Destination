#define ff first
#define ss second
#define mod 1000000007
#define ll long long

class Solution {
public:
    vector<vector<pair<int,int>>> adj;
    int countPaths(int n, vector<vector<int>>& roads) {
        /*
            dijkstra + frequency array
        */
        adj.assign(n+1, vector<pair<int,int>> {});
        for(int i = 0;i<roads.size();i++){
            int u = roads[i][0], v= roads[i][1], w = roads[i][2];
            adj[u].push_back({v, w});
            adj[v].push_back({u, w});
        }
        priority_queue<pair<ll,ll>, vector<pair<ll,ll>>, greater<pair<ll,ll>> > p;
        p.push({0, 0});
        vector<ll> dis(n+1, 1e9), fre(n+1, 0);
        fre[0]=1;

        while(!p.empty()){
            pair<ll,ll> x = p.top();
            p.pop();

            if(x.ff > dis[x.ss]) continue;

            for(auto i: adj[x.ss]){
                if(dis[i.ff] > (x.ff + i.ss)){
                    dis[i.ff] = (x.ff + i.ss);
                    p.push({ x.ff+ i.ss, i.ff});
                    fre[i.ff]=fre[x.ss];
                }else if(dis[i.ff] == (x.ff+i.ss)){
                    fre[i.ff] = (fre[i.ff]%mod + fre[x.ss]%mod )%mod;
                    if(fre[i.ff]<0) fre[i.ff] += mod;
                }
            }
        }
        return fre[n-1];
    }
};
