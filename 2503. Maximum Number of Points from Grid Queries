#define ff first
#define ss second
#define ll long long
class Solution {
public:
    vector<vector<int>> dir{{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
    vector<int> maxPoints(vector<vector<int>>& grid, vector<int>& queries) {
        vector<pair<ll, ll>> query(queries.size());
        for (int i = 0; i < queries.size(); i++) {
            query[i] = {queries[i], i};
        }
        int n = queries.size();
        sort(query.begin(), query.end());
        vector<int> ans(n, 0);
        priority_queue<tuple<int,int,int>, vector<tuple<int,int,int>>, greater<tuple<int,int,int>>> p;
        vector<vector<bool>> vis(grid.size(),
                                 vector<bool>(grid[0].size(), false));

        // val, r, c
        p.push({grid[0][0], 0, 0});

        ll i = 0, prev = 0;
        while (i < n) {
            ll cnt = 0;
            while (!p.empty() && get<0>(p.top())<query[i].ff ) {
                tuple<int, int, int> x = p.top();
                p.pop();
                if(vis[get<1>(x)][get<2>(x)])
                    continue;
                vis[get<1>(x)][get<2>(x)] = true;
                cnt+=1;

                for(int k=0;k<4;k++){
                    int u= get<1>(x) + dir[k][0], v= get<2>(x) + dir[k][1];

                    if(u>=0 && v>=0 && u<grid.size() && v<grid[0].size() && !vis[u][v]){
                        p.push({grid[u][v], u, v});
                    }
                }
                
            }
            ans[query[i].ss] = prev + cnt;
            prev = prev + cnt;
            i += 1;
        }

        return ans;
    }
};
