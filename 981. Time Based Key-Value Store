#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
  
#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update>
#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)


class TimeMap {
public:
    
    map<string, ordered_set> m;
    map<string, vector<string>> m2; 
    TimeMap() {
        
    }
    
    void set(string key, string value, int timestamp) {
        
        m2[key].pb(value);
        m[key].insert(timestamp);
    }
    
    string get(string key, int timestamp) {
        
        
        
        
        auto it= m[key].upper_bound(timestamp);
        
        
        if(it== m[key].end() && m[key].size()>0){
           
            return m2[key][m[key].size()-1];
        }
        else if(it==m[key].begin()){
            return "";
        }
        
        else {
            
            int x= m[key].order_of_key(*it);
            return m2[key][x-1];
            
              }
    }
};
