#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)

struct dsu{
  
    vector<ll> par, rank;
    void makeset(int n){
        par.assign(n+2, 0);
        rank.assign(n+2, 1);
        
        rep(i,n+1) par[i]=i;
    }
    
    int find(int x){
        while(par[x]!=x)
            x= par[x];
        
        return x;
    }
    
    void unite(int u, int v){
        u= find(u), v=find(v);
        
        if(u!=v){
            if(rank[u]<rank[v]){
                par[u] = v;
                rank[v]+=rank[u];
            }
            else{
                par[v]=u;
                rank[u]+=rank[v];
            }
        
        }
    }
    
    
};

class Solution {
public:
    int makeConnected(int n, vector<vector<int>>& connections) {
        
        dsu d;
        
        d.makeset(n);
        
        ll free=0;
        rep(i,connections.size()){
            if(d.find(connections[i][0])!=d.find(connections[i][1])){
                d.unite(connections[i][0], connections[i][1]);
            }else{
                free++;
            }
        }
        
        set<int> s;
        rep(i,n){
            s.insert(d.find(i));
        }
        if(free<s.size()-1) return -1;
        
        return s.size()-1;
    }
};
