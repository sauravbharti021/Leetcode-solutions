#define ff first
#define ss second
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
  
#define ordered_multiset tree<int, null_type,less_equal<int>, rb_tree_tag,tree_order_statistics_node_update>

class Router {
public:
    queue<pair<int, pair<int, int>>> q;
    int limit;
    set<pair<int, pair<int,int>>> st;
    map<int, vector<int>> m;
    // removed 
    map<int, int> removed_from_begin;
    Router(int memoryLimit) {
        limit = memoryLimit;
    }
    
    bool addPacket(int source, int destination, int timestamp) {
        if(st.find({source, {destination, timestamp}})!=st.end()) return false;
        if(st.size() == limit){
            pair<int,pair<int,int>> f = q.front();
            q.pop();
            st.erase(f);
            removed_from_begin[f.ss.ff]+=1;

            q.push({source, {destination, timestamp}});
            m[destination].push_back(timestamp);
            st.insert({source, {destination, timestamp}});
        }else{

            m[destination].push_back(timestamp);
            st.insert({source, {destination, timestamp}});
            q.push({source, {destination, timestamp}});
        }
        return true;
    }
    
    vector<int> forwardPacket() {
        if(q.empty()) return vector<int> {};
        pair<int,pair<int,int>> f = q.front();
        q.pop();
        st.erase(f);
        removed_from_begin[f.ss.ff]+=1;

        return vector<int> {f.ff, f.ss.ff, f.ss.ss};
    }
    // bs
    int getCount(int destination, int startTime, int endTime) {
        
        auto it = lower_bound(m[destination].begin()+removed_from_begin[destination], m[destination].end(), startTime);
        int left = it-m[destination].begin();

        auto it2 = upper_bound(m[destination].begin()+removed_from_begin[destination], m[destination].end(), endTime);
        int right = it2-m[destination].begin();
        return right-left;
    }
};
