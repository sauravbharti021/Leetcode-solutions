
class Solution {
public:
    vector<vector<int>> dir {{0,1}, {0,-1},{1,0},{-1,0}};
    vector<vector<bool>> vis;
    int flag;
    void dfs(int u, int v, vector<vector<int>> &g1, vector<vector<int>> &g2){
        int n = g1.size(), m = g1[0].size();
        
        if(!g1[u][v]){
            flag =1;
            return;
        }
        vis[u][v] = true;
        for(auto k: dir){
            int x= u+ k[0];
            int y= v+ k[1];
            if(x>=0 && y>=0 && x<n && y<m && g2[x][y] && !vis[x][y]){
              dfs(x, y, g1, g2);  
            }
        }
    }
    int countSubIslands(vector<vector<int>>& grid1, vector<vector<int>>& grid2) {
       /*
        DSU?
       */
        int n = grid1.size(), m = grid1[0].size();
        vis.assign(n+1, vector<bool>(m+1, false));
        
        int ans=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid2[i][j] && !vis[i][j]){
                    flag = 0;
                    dfs(i, j, grid1, grid2);
                    if(!flag)
                        ans+= 1;
                }
            }
        }
        return ans;
    }
};
