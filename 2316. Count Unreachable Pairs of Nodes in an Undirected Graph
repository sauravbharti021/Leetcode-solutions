#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)

struct dsu{
    vector<int> par,rank;
    void makeset(int n){
        par.assign(n+1, 0);
        rank.assign(n+1, 1);
        
        rep(i, n+1) par[i]=i;
    }
    int find(int x){
        while(par[x]!=x)
            x=par[x];
        
        return x;
    }
    
    void unite(int u, int v){
        u=find(u);
        v=find(v);
        if(u!=v){
            if(rank[u]<rank[v]){
                par[u]=v;
                rank[v]+=rank[u];
            }else{
                par[v]=u;
                rank[u]+=rank[v];
            }
        }
        
    }
};

class Solution {
public:
    long long countPairs(int n, vector<vector<int>>& edges) {
        dsu d;
        d.makeset(n+1);
        
        rep(i, edges.size()){
            d.unite(edges[i][0], edges[i][1]);
        }
        
        set<int> s;
        rep(i,n){
            s.insert(d.find(i));
        }
        vector<ll> now;
        for(auto i: s){
            now.pb(d.rank[i]);
        }
        
        ll ans=0, cur=1;
        vector<ll> suf(now.size()+2, 0);
        rrep(i, now.size()){
            suf[i]= (i+1<now.size() ? suf[i+1] : 0 )+ now[i];
        }
        
        rep(i,now.size()){
           ans+= (now[i] * suf[i+1]); 
        }
        
        
        return ans;
    }
};
