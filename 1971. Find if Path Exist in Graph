struct DSU{
    vector<int> par;
    vector<double> rank;
    void makeset(int n){
        par.assign(n+1, 0);
        rank.assign(n+1, 0.001);
        for(int i=0;i<=n;i++) par[i]=i;
    }
    
    int find(int x){
        while(par[x]!=x)
            x=par[x];
        return x;
    }
    void unite(int u,int v){
        u = find(u);
        v = find(v);
        
        if(u!=v){
            if(rank[u]<rank[v]){
                par[u] =v;
                rank[v]+= rank[u];
            }else{
                par[v] =u;
                rank[u]+= rank[v];
             }
        }
    }
};
class Solution {
public:
    bool validPath(int n, vector<vector<int>>& edges, int source, int destination) {
        
        DSU d;
        d.makeset(n);
        
        for(int i=0;i<edges.size();i++){
            int u= edges[i][0];
            int v= edges[i][1];
            
            d.unite(u,v);
        }
        
        return d.find(source) == d.find(destination);
    }
};
