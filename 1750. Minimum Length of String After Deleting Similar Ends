class Solution {
public:
    int minimumLength(string s) {
        int n = s.size();
        int l=0, r= n-1;
        
            
        // No binary search, 
        // two pointers, all the way

        int mx;
        
        while(r>l){
            
            int sl = l; 
            int cnt=0;
            
            int flag1=0, flag2=0;
            while(s[l]==s[sl] && s[l]==s[r] && l<r && l+1<r){
                flag1=1;
                l++;
            }
            
            int sr = r;
            while(s[r] == s[sr] && s[r]==s[sl] && r>l && (r-1)>l){
                flag2=1;
                r--;
            }
            
            
            cnt = max(cnt, (l-sl));
            cnt = max(cnt, (sr-r));
            
            
            // cout<<l<<" d "<<r<<" "<<cnt<<"\n";
            
            
            
            if(!flag1 || !flag2)  {
                
                if(s[l]!=s[r]){
                    
                    if(l<r){
                        l=sl;
                        r=sr;

                    }
                }
                break;
            }

            mx = cnt;
            
        }
        
        if((r-l<=2)){
            if(s[r] == s[l] && (r-l == 2)) return 1;
            else if(s[r]==s[l] && (r-l == 1)) return 0;
            else if((r-l)==2)
                return 3;
            else if(r-l==1)
                return 2;
            else return 1;
            
        }
        
        return (r)-(l)+1;
    }
};
