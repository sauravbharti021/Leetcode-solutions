/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 #define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)

class Solution {
public:
    int cnt=0;
    vector<int> a,b;
    bool leafSimilar(TreeNode* root1, TreeNode* root2) {
        
        recur(root1);
        cnt=1;
        recur(root2);

        if(a.size()!=b.size()) return false;

        

        rep(i, a.size()) if(a[i]!=b[i]) return false;

        return true;
    }
    void recur(TreeNode* root){
        if(root==NULL) return;

        if(root->left==NULL && root->right==NULL){
            if(cnt==0) a.pb(root->val);
            else b.pb(root->val);

        }

        recur(root->left);
        recur(root->right);

    }
};
