class Solution {
public:
    vector<int> color,vis;
    vector<vector<int>> adj;
    int N;
    struct dsu{
        vector<int> par, rank;
        void makeset(int n){
            par.assign(n+1, 0);
            rank.assign(n+1, 0);
            for(int i=0;i<=n;i++){
                par[i]=i;
            }
        }
        int findPar(int x){
            while(x!=par[x])
                x= par[x];
            return x;
        }
        void unite(int u, int v){
            u = findPar(u);
            v= findPar(v);
            if(rank[u]<rank[v]){
                rank[v]+= rank[u];
                par[u]=v;
            }else{
                rank[u]+=rank[v];
                par[v]=u;
            }
        }
    };
    bool detectOddCycle(int n, int sign){
        if(color[n]!=0 && color[n]!=sign)
            return false;
        vis[n] = true;
        color[n] = sign;
        bool ans = true;
        for(auto i: adj[n]){
            if(!vis[i]){
                ans &= detectOddCycle(i, sign^1);
            }
            else if(color[i]==sign){
                return false;
            }
        }
        return ans;
    }
    int bfs(int n){
        queue<int> q;
        int cnt=0;
        q.push(n);
        vector<int> vis(N+1, false);
        vis[n]= true;
        while(!q.empty()){
            int size = q.size();
            while(size--){
                int x = q.front();
                vis[x]= true;
                q.pop();
                for(auto j: adj[x]){
                    if(j!=x && !vis[j]){
                        q.push(j);
                        vis[j]=true;
                    }
                }
            }
            cnt+=1;
        }
        return cnt;
    }
    int magnificentSets(int n, vector<vector<int>>& edges) {
       /*
            cycle of length 3 or odd length
            how to plot

            topological sort?
            maximum width one connected component can deliver
       */ 
       color.assign(n+1, 0);
       vis.assign(n+1, 0);
       N=n;
        dsu d;
        d.makeset(n+1);
       adj.assign(n+1, vector<int>{});
       for(int i=0;i<edges.size();i++){
        int u = edges[i][0], v= edges[i][1];
        adj[u].push_back(v);
        adj[v].push_back(u);
        d.unite(u, v);
       }
       for(int i=1;i<=n;i++){
        if(!vis[i]){
            bool temp = detectOddCycle(i, 1);
            if(!temp) return -1;
        }
       }

        map<int,vector<int>> m;
        for(int i=1;i<=n;i++){
            int par = d.findPar(i);
            m[par].push_back(i);
        }

        int ans = 0;
        for(auto i: m){
            int now = 0;
            for(auto j: i.second){
                now = max(now, bfs(j));
            }

            ans+=now;
        }
        return ans;
    }
};
