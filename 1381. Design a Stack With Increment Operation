class Node{
public:
    Node* prev;
    Node* next;
    int val;
    Node(int value){
        prev = NULL;
        next = NULL;
        val = value;
    }
};
class CustomStack {
public:
    Node* tail;
    Node* head;
    int size;
    int listSize;
    /*
        Feels like again a doubly linked list problem...
    */
    CustomStack(int maxSize) {
        size = maxSize;
        tail= new Node(0);
        head= new Node(0);
        tail->prev = head;
        head->next = tail;
        listSize=0;
    }
    
    void push(int x) {
        if(listSize==size)
            return;
        Node* last = tail->prev;
        if(last == head){
            Node* newNode = new Node(x);
            head->next = newNode;
            newNode->prev = head;
            newNode->next = tail;
            tail->prev = newNode;
        }else{
           Node* newNode = new Node(x);
            last->next = newNode;
            newNode->prev = last;
            newNode->next = tail;
            tail->prev = newNode;
        }
        listSize += 1;
    }
    
    int pop() {
        Node* last = tail->prev;
        if(last == head)
            return -1;
        Node* lastlast = last->prev;
        lastlast->next = tail;
        tail->prev = lastlast;
        listSize-=1;
        return last->val;
    }
    
    void increment(int k, int val) {
        Node* str = head->next;
        printList(head);
        while(str!=tail && k--){
            str->val += val;
            str = str->next;
        }
    }
};
