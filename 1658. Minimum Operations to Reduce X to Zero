#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
class Solution {
public:
    int minOperations(vector<int>& nums, int x) {
    
        
        int n= nums.size();
        vector<int> pre(n+1,0), suf(n+1, 0);
        
        rep(i,n){
            pre[i]= (i>0? pre[i-1]: 0)+ nums[i];
        }
        rrep(i,n){
            suf[i]= (i+1<n? suf[i+1]: 0) + nums[i];
        }
        vector<int> lol= suf;
        sort(all(lol));
        
        int mi= 1e6;
        rep(i,n){
            if(pre[i]>x) break;
            int need= x-pre[i];
            if(need==0){mi=min(mi, i+1); continue;}
            
            if(i==n-1) continue;
            
            auto it= lower_bound(lol.begin(), lol.begin()+(n-(i+1)-1), need);
            if(*it==need){
                int index= it-lol.begin();
                mi= min(mi, i+1+index+1);
            }
        }
        
        rrep(i,n){
            if(suf[i]>x) break;
            int need= x-suf[i];
            if(need==0){mi=min(mi, n-i); continue;}
            if(i==0) continue;
            
            auto it = lower_bound(pre.begin(), pre.begin()+i-1, need);
            if(*it==need){
                int index= it-pre.begin();
                mi= min(mi, n-i+index+1);
            }
        }
        
        return mi==1e6? -1 : mi;
        
    }
};
