class Solution {
public:
    void mergeSort(int l, int r, int mid, vector<int> &nums){
        if(r-l<=1)
            return;
        if(l==r)
            return;
        int left= l;
        int right = mid;
        vector<int> b(r-l+1, 0);
        int k = 0;
        while(left<mid && right<=r){
            if(nums[left]>nums[right]){
                b[k] = nums[right];
                right+=1;
            }else{
                b[k] = nums[left];
                left+=1;
            }
            k++;
        }
        while(left<mid){
            b[k] = nums[left];
            left+=1;
            k+=1;
        }
        while(right<=r){
            b[k] = nums[right];
            right+=1;
            k+=1;
        }
        
        for(int i=0;i<(r-l+1);i++){
            nums[i+l] = b[i];
        }
    }
    void partition(int l, int r, vector<int> &nums){
        if(l>=r)
            return;
        if(abs(r-l)==1){
            if(nums[r]<nums[l])
                swap(nums[r], nums[l]);
            return;
        }
        
        int mid = (l+r)/2;
        partition(l, mid-1, nums);
        partition(mid, r, nums);
        
        mergeSort(l, r, mid, nums);
    }
    vector<int> sortArray(vector<int>& nums) {
        int n = nums.size();
        partition(0, n-1, nums);
        
        return nums;
    }
};
