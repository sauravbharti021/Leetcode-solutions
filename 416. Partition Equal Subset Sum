class Solution {
public:
    vector<vector<int>> dp;
    bool recur(int i, int target, vector<int> &nums){
        // cout<<target<<" "<<i<<"\n";
        if(target == 0){
            return true;
        }
        if(i<0){
            return false;
        }
        if(dp[i][target]!=-1)
            return dp[i][target];
        bool ans = false;
        if((target - nums[i]) >=0){
            ans |= recur(i-1, target-nums[i], nums);
        }
        ans |= recur(i-1, target, nums);

        return dp[i][target] = ans;
    }
    bool canPartition(vector<int>& nums) {
       int sum = 0, n= nums.size();
       sort(nums.begin(), nums.end());
       for(int i=0;i<n;i++){
        sum+= nums[i];
       } 
       if(sum%2==1) return false;
       int target = sum/2;
       dp.assign(n+1, vector<int>(target+1, -1));

        bool res = recur(n-1, target, nums);
        return res;
    }
};
