#define ll long long
#define ff first
#define ss second
class Solution {
public:
    vector<vector<int>> modifiedGraphEdges(int n, vector<vector<int>>& edges, int source, int destination, int target) {
        vector<bool> vis(n+1, false);
        vector<ll> dis(n+1, 1e9);
        dis[source] = 0;
        queue<int> q;
        q.push(source);
        vector<vector<pair<int,int>>> adj(n+1);
        for(int i=0;i<edges.size();i++){
            int u= edges[i][0], v = edges[i][1], w = edges[i][2];
            if(w!=-1){
                adj[u].push_back({v, w});
                adj[v].push_back({u, w});
            }
        }
        
        while(!q.empty()){
            int x= q.front();
            q.pop();
            
            for(auto i: adj[x]){
                if(i.ss!=-1){
                    if(dis[i.ff] > (dis[x] + i.ss )){
                        q.push(i.ff);
                        dis[i.ff] = dis[x]+i.ss;
                    }
                }
            }
        }
        
        if(dis[destination]<target){
            return vector<vector<int>>{};
        }
        if(dis[destination]==target){
            for(int i=0;i<edges.size();i++){
                int u= edges[i][0], v = edges[i][1], w = edges[i][2];
                if(w==-1){
                    edges[i][2]=2e9;
                }
            }
            return edges;
        }
        
        int flag =0;
        for(int i=0;i<edges.size();i++){
            int u = edges[i][0], v= edges[i][1], w= edges[i][2];
            
            if(w!=-1) continue;
            w = flag? 2e9: 1;
            edges[i][2]=w;
            adj[u].push_back({v, w});
            adj[v].push_back({u, w});
            
            if(!flag){
                int newD = dijkstra(n, source, destination, adj);
                if(newD <= target){
                    flag =1;
                    edges[i][2] += (target-newD);
                }
            }
        }
        
        if(flag)
            return edges;
        return vector<vector<int>> {};    
    }
    
    int dijkstra(int n, int source, int destination, vector<vector<pair<int,int>>> &g ){
        
        priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> p;
        vector<ll> d(n+1, 2e9+1);
        p.push({0, source});
        d[source] = 0;
        while(!p.empty()){
            pair<int,int> x = p.top();
            p.pop();
            if(x.ff>d[x.ss]) continue;
            for(auto i: g[x.ss]){
                if(d[i.ff] > (x.ff+ i.ss)){
                    d[i.ff] = x.ff+i.ss;
                    p.push({(x.ff+i.ss), i.ff});
                }
            }
        }
        
        return d[destination];
    }
};
