class Solution {
public:
    vector<vector<int>> insert(vector<vector<int>>& intervals, vector<int>& newInterval) {
        
        int n= intervals.size();
         int left= newInterval[0], right= newInterval[1];
        int flag=0;
        
        
        vector<vector<int>> ans;
        if(n==0){
            ans.push_back(newInterval);
            return ans;
        }
        for(int i=0;i<n;i++){
            
            if(flag){
                for(int i=0;i<ans.size();i++){
                }
                if(intervals[i][0]> ans.back()[1]){
                    ans.push_back(intervals[i]);
                    continue;
                }else if(intervals[i][1]>=ans.back()[1]){
                    
                    vector<int> now = ans.back();
                    
                    
                    now[1]= intervals[i][1];
                    ans.back() =(now);
                }else{
                    continue;
                }
                
                continue;
            }
            if(intervals[i][1]<left ) {
                ans.push_back(intervals[i]);
                continue;
            }
            else{
                if(intervals[i][0]>left){
                    flag=1;
                    if(right>= intervals[i][1]){ 
                        ans.push_back(newInterval);
                    }else if(right<intervals[i][0]){
                        ans.push_back(newInterval);
                        ans.push_back(intervals[i]);
                    }else{
                        vector<int> temp{left, intervals[i][1]};
                        ans.push_back(temp);
                    }
                }else{
                    flag=1;
                    if(right<=intervals[i][1]){
                        ans.push_back(intervals[i]);
                    }else {
                        vector<int> temp{intervals[i][0], right};
                        ans.push_back(temp);
                    }
                }
            }
        }
        
        if(!flag){
            ans.push_back(newInterval);
        }
        
        return ans;
    }
};
