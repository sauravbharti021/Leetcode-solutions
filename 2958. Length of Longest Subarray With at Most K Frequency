class Solution {
public:
    int maxSubarrayLength(vector<int>& nums, int k) {
     
        /*
            bs + sliding window?
            
        */
        
        int n= nums.size();
        int l=0, r= n+1;
        
        while(r-l>1){
            int m = (l+r)/2;
            
            unordered_map<int,int> f;
            int flag=0;
            
            set<int> s;
            
            for(int i=0;i<m;i++){
                f[nums[i]]+=1;
                
                if(f[nums[i]]>k){
                    s.insert(nums[i]);
                }
                
            }
            if(s.size()==0){
                flag=1;
            }
            
            for(int i=1;i+m<=n;i++){
                if(i-1>=0){
                    if(f[nums[i-1]]==(k+1)){
                        s.erase(nums[i-1]);
                    }
                    
                    f[nums[i-1]]-=1;
                }
                
                f[nums[i+m-1]]+=1;
                if(f[nums[i+m-1]]>k){
                    s.insert(nums[i+m-1]);
                }
                
                if(s.size()==0){
                    flag=1;
                }

            }
            
            
            if(flag){
                l=m;
            }else{
                r=m;
            }
        }
        
        return l;
    }
};
