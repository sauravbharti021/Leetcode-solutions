#define rep(i,n) for(int i=0;i<n;i++)
#define all(c) c.begin(), c.end()
#define rrep(i, n) for(int i=n-1; i>=0; i--)
#define pb push_back
#define ff first
#define ss second
class Solution {
public:
    
    int gcd(int a, int b){
        if(b==0){
            return a;
        }
        
        return gcd(b, a%b);
    }
    
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        
        int n= nums.size();
        
        vector<pair<int,int>> a(n);
        
        rep(i,n){
            a[i].ff = nums[i];
            a[i].ss = i;
        }
        sort(all(a));
        vector<int> dp(n+1, 1);
        
        int mx =0;
        rep(i,n){
            
            for(int j=i-1;j>=0;j--){
                if(a[i].ff % a[j].ff == 0){
                    
                    dp[i] = max(dp[i], 1+ dp[j]);
                    
                    
                }else if(a[i].ff==1 || a[j].ff==1){
                    dp[i] = max(dp[i], 1+ dp[j]);
                }
            }
            
            mx= max(mx, dp[i]);
        }
        
        vector<int> res;
        
        int cur = 1;
        rrep(i, n){
            if(dp[i]== mx && (cur%a[i].ff == 0 || a[i].ff%cur ==0)  ){
                res.push_back(nums[a[i].ss]);
                
                cur= a[i].ff;
                
                mx -= 1;
            }
        }
        
        reverse(all(res));
        
        return res;
        
    }
};
