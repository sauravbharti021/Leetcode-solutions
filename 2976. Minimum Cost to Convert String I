class Solution {
public:
    vector<vector<int>> dp;
    vector<vector<pair<int,int>>> adj;
    void bfs(int n){
        queue<int> q;
        q.push(n);
        dp[n][n]=0;
        
        while(q.size()>0){
            int x= q.front();
            q.pop();
            for(auto i: adj[x]){
                if(dp[n][i.first] > (dp[n][x] + i.second) ){
                    dp[n][i.first]= dp[n][x]+ i.second;
                    q.push(i.first);
                }
            }
        }
    }
    long long minimumCost(string source, string target, vector<char>& original, vector<char>& changed, vector<int>& cost) {
        dp.assign(26, vector<int>(26, 1e9));
        adj.assign(26, vector<pair<int,int>>{});
        int n= source.size();
        int m= cost.size();
        for(int k=0;k<m;k++){
            int i= (original[k]-'a');
            int j= (changed[k]-'a');
            adj[i].push_back({j, cost[k]});
        }
        long long ans=0;
        for(int i=0;i<26;i++){
            bfs(i);
        }
        for(int k=0;k<n;k++){
            if(source[k]!=target[k]){
                int i= (source[k]-'a');
                int j= (target[k]-'a');
                if(dp[i][j]==1e9)
                    return -1;
                ans+= dp[i][j];
            }
        }
        
        return ans;
    }
};
