class Solution {
public:
    
    vector<vector<int>> d {{1, -1}, {1,1}, {1,0}};
    int dp[71][71][71];
    int recur(int i1, int j1, int i2, int j2, vector<vector<int>> &g){
        
        if(i1==g.size() && i2== g.size())
            return 0;
        
        if(dp[i1][j1][j2]!=-1)
            return dp[i1][j1][j2];
        
        int ans= 0;
        if(i1==i2 && j1==j2){
            ans += g[i1][j1];
            
        }else{
            ans += (g[i1][j1] + g[i2][j2]); 
        }
        
        int res= 0;
        for(int k=0;k<3;k++){
            int u1= d[k][0] + i1;
            int v1= d[k][1] + j1;
           
            for(int l=0;l<3; l++){
                
                int u2 = d[l][0] + i2;
                int v2= d[l][1] + j2;

                if( v1>=0 && v2>=0 && v1<g[0].size() && v2<g[0].size()){

                    res = max(res, ans + recur(u1, v1, u2, v2, g));

                }
            }
        }
        
        return dp[i1][j1][j2] = res;
    }
    int cherryPickup(vector<vector<int>>& grid) {
        memset(dp, -1, sizeof dp);
        
        return recur(0, 0, 0, grid[0].size()-1 , grid);
    }
};
