#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
class Solution {
public:
    map<pair<ll,ll>,ll> m;
    map<int,int> m1;
    bool recur(int i, int prev, vector<int> &stones){
        if(i==stones.size() - 1)
            return true;
        if(m.find({i, prev})!=m.end()) return m[{i, prev}];
        
        ll k= stones[i]-prev;
        
        ll ans=0;
        if(m1.find(stones[i]+k) !=m1.end() ) 
            ans |= recur(m1[stones[i]+k], stones[i], stones );
        if( (stones[i]+k-1)!=stones[i] &&  m1.find(stones[i]+k-1) !=m1.end() ) 
            ans |= recur(m1[stones[i]+k-1], stones[i], stones );
        if(m1.find(stones[i]+k+1) !=m1.end() ) 
            ans |= recur(m1[stones[i]+k+1], stones[i], stones );
        
        return m[{i, prev}]= ans;
    }
    
    bool canCross(vector<int>& stones) {
        int n=stones.size();
        rep(i,n) m1[stones[i]]=i;
        if(stones[1]!=1) return false;
        return recur(1, 0, stones);
    }
};
