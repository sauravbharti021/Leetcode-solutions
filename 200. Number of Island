class Solution {
public:
    vector<vector<int>> vis;
    vector<vector<int>> dir{{0,1}, {0,-1}, {1, 0}, {-1,0}};
    
    void dfs(int u, int v, vector<vector<char>> &grid){
        int n= grid.size(), m= grid[0].size();
        
        vis[u][v]= 1;
        for(int k=0;k<4;k++){
            int i = u+dir[k][0], j= v+dir[k][1];
            
            if(i<0 || j<0 || i>=n || j>=m) continue;
            if(vis[i][j]==-1 && grid[i][j]=='1'){
                dfs(i, j, grid);
            }
        }
        
    }
    int numIslands(vector<vector<char>>& grid) {
        int n= grid.size(), m= grid[0].size();
        
        vis.assign(n+1, vector<int>(m+1, -1));
        int cnt=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(vis[i][j]==-1 && grid[i][j]=='1'){
                    cnt+=1;
                    dfs(i, j, grid);
                }
            }
        }
        
        return cnt;
    }
};
