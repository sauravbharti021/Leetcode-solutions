#define ff first
#define ss second
class Solution {
public:
    int smallestChair(vector<vector<int>>& times, int targetFriend) {
        
        /*
            multiple changing segments.
            
        */
        int n= times.size();
        vector<pair<int,int>> a;
        for(int i=0;i<n;i++){
            a.push_back({times[i][0], i});
            a.push_back({times[i][1], -i});
        }
        sort(a.begin(), a.end());
        priority_queue<int, vector<int>, greater<int>> ava;
        priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> occupiedChairs;
        
        for(int i=0;i<n;i++) ava.push(i);
        
        for(int i=0;i<2*n;i++){
            int time = a[i].ff;
            int friendIndex =a[i].ss;
            
            while(!occupiedChairs.empty() && time>=occupiedChairs.top().first){
                ava.push(occupiedChairs.top().second);
                occupiedChairs.pop();
            }
            if(friendIndex>=0){
                int chairTillNow = ava.top();
                ava.pop();
                if(friendIndex == targetFriend)
                    return chairTillNow;

                occupiedChairs.push({times[friendIndex][1], chairTillNow});
            }
        }
        return -1;
    }
};
