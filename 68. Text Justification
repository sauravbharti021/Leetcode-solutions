#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for (int i = n - 1; i >= 0; i--)
#define rep(i, n) for (int i = 0; i < n; i++)
class Solution {
public:
    vector<string> fullJustify(vector<string>& words, int maxWidth) {
        
        int n= words.size();
        vector<int> pre(n+2,0);
        
        rep(i,n){
            pre[i] = (i>0 ? pre[i-1] : 0) + words[i].size();
        }
        
       
        
        vector<string> ans;
        int i=0;
        while(i<n){
        
            ll l=1, r= n-i+1;
            while(r-l>1){
                int mid= (r+l)/2;
                
                if( (pre[i+mid-1] - (i>0? pre[i-1]: 0) + mid-1  )<= maxWidth) l=mid;
                else r= mid;
            }
            string s="";
            
            int extra_space =  (maxWidth - (pre[i+l-1] - (i>0? pre[i-1]: 0) + l-1));
            
            if(i+l==n || l==1){
                for(int k=i;k<i+l;k++){
                    s+= words[k];
                    s+= " ";
                }
                s.pop_back();
                
                for(int k=0;k<extra_space;k++){
                    s+=" ";
                }
                ans.pb(s);
                if(i+l>=n) break;
                else i+=l;
            }
            else{
                int slots = l-1;
                int rem= extra_space %slots;
                int div= extra_space/slots;
                ll cnt=0;
                
                for(int k=i;k<i+l;k++){
                    s+= words[k];
                    ll x= div;
                    if(k<i+l-1){
                        s+= " ";

                        while(x--){
                            s+= " ";

                        }
                        if(rem>0){
                            s+=" ";
                            rem--;
                        }
                    }
                }
                ans.pb(s);
                i+=l;
            }
            
        }
        return ans;
        
    }
};
