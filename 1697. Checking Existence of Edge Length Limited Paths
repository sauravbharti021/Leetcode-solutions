#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rrep(i, n) for(int i=n-1;i>=0;i--)
#define rep(i,n) for(int i=0;i<n;i++)
class Solution {
    
    struct dsu{

    vector<ll> par, rank;
    void makeset(int n){
        par.assign(n+2, 0);
        rank.assign(n+2, 1);

        rep(i,n+1) par[i]=i;
    }

    int find(int x){
        while(par[x]!=x)
            x= par[x];

        return x;
    }

    void unite(int u, int v){
        u= find(u), v=find(v);

        if(u!=v){
            if(rank[u]<rank[v]){
                par[u] = v;
                rank[v]+=rank[u];
            }
            else{
                par[v]=u;
                rank[u]+=rank[v];
            }

        }
    }


};
    
public:
    vector<bool> distanceLimitedPathsExist(int n, vector<vector<int>>& edgeList, vector<vector<int>>& queries) {
        dsu d;
        d.makeset(n+1);
        
        map<int, vector<pair<int,int>> > m;
        rep(i, edgeList.size()){
            m[edgeList[i][2]].pb({edgeList[i][0], edgeList[i][1]});
        }
        
        vector<bool> ans(queries.size(), false);
        
        vector<pair<int,int>> a;
        rep(i, queries.size()){
            a.pb({queries[i][2], i});
        }
        
        sort(all(a));
        
        ll j=0;
        
        for(auto i: m){
            while(j<a.size() && a[j].ff<=i.ff){
                int index  = a[j].ss;
                if( d.find(queries[index][0]) == d.find(queries[index][1])  )
                    ans[index]=true;
                
                j++;
            }
            
             rep(k, i.ss.size())
                d.unite(i.ss[k].ff, i.ss[k].ss);
        }
        
        for(j ; j<a.size(); j++){
            int index  = a[j].ss;
             if(d.find(queries[index][0]) == d.find(queries[index][1])  )
                    ans[index]=true;
        }
        
        return ans;
        
    }
};
