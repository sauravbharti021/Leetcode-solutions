class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        
        queue<TreeNode*> q1;
        queue<int> q2;
        
        map<int, vector<int>> check;
        
        q1.push(root);
        q2.push(0);
        
        int mi=0,mx=0;
        
        
        
        while(!q1.empty()){
            
            map<int, vector<int>>m;
            int size=q1.size();
            for(int i=0; i<size; i++){
                TreeNode* node =q1.front();
                q1.pop();
                
                int index= q2.front();
                q2.pop();
                
                m[index].push_back(node->val);
                if(index<mi) mi=index;
                if(index>mx) mx=index;
                
                if(node->left!= NULL){
                    q1.push(node->left);
                    q2.push(index-1);
                }
                if(node->right !=NULL){
                    q1.push(node->right);
                    q2.push(index+1);
                }
                
                
                
            }
            
            for(auto i=m.begin();i!=m.end();i++) {
                sort(i->second.begin(), i->second.end());
                
                for(int j=0;j< i->second.size();j++) {
                    check[i->first].push_back(i->second[j]);
                }
            }
        }
        
        vector<vector<int>> ans;
        for(int i=mi; i<=mx; i++){
            if(check.find(i)!=check.end()){
                ans.push_back( check[i]);
            }
        }
        
        return ans;
        
    }
};
